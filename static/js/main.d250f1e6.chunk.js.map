{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","functions/getUser.ts","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","cn","completed","title","TodoList","todos","map","getUser","usersList","userId","find","TodoForm","onSubmit","newTodoId","useState","chosenUserId","setChosenUser","todoTitle","setTodoTitle","submitTried","setSubmitTried","action","method","event","preventDefault","selectedUserId","Number","users","type","placeholder","value","onChange","target","disabled","usersFromServer","App","todosList","setTodosList","Math","max","newTodo","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d250f1e6.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\n\nimport './UserInfo.scss';\nimport { UserInfoProps } from '../../types/UserInforTypes';\n\nexport const UserInfo: FC<UserInfoProps> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import { FC } from 'react';\nimport cn from 'classnames';\n\nimport './TodoInfo.scss';\nimport { TodoInfoProps } from '../../types/TodoInfoTypes';\nimport { UserInfo } from '../UserInfo';\n\nexport const TodoInfo: FC<TodoInfoProps> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { FC } from 'react';\n\nimport { TodoListProps } from '../../types/TodoListTypes';\nimport { TodoInfo } from '../TodoInfo';\n\nexport const TodoList: FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (<TodoInfo todo={todo} key={todo.id} />))}\n    </section>\n  );\n};\n","import { UserType } from '../types/UserType';\n\nexport function getUser(\n  usersList: UserType[],\n  userId: number,\n): UserType | null {\n  const foundUser = usersList.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n","import { FC, FormEvent, useState } from 'react';\n\nimport users from '../../api/users';\n\nimport './TodoForm.scss';\nimport { getUser } from '../../functions/getUser';\nimport { TodoFormProps } from '../../types/TodoFormTypes';\n\nexport const TodoForm: FC<TodoFormProps> = ({ onSubmit, newTodoId }) => {\n  const [chosenUserId, setChosenUser] = useState<string>('0');\n  const [todoTitle, setTodoTitle] = useState<string>('');\n  const [submitTried, setSubmitTried] = useState<boolean>(false);\n\n  const setDefaultState = () => {\n    setChosenUser('0');\n    setTodoTitle('');\n    setSubmitTried(false);\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const selectedUserId = Number(chosenUserId);\n\n    if (!todoTitle || !selectedUserId) {\n      setSubmitTried(true);\n\n      return;\n    }\n\n    const todo = {\n      id: newTodoId,\n      title: todoTitle,\n      completed: false,\n      userId: selectedUserId,\n      user: getUser(users, selectedUserId),\n    };\n\n    setDefaultState();\n\n    onSubmit(todo);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={todoTitle}\n          onChange={(event) => setTodoTitle(event.target.value)}\n        />\n        {!todoTitle && submitTried\n        && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={chosenUserId}\n          onChange={(event) => setChosenUser(event.target.value)}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n          {users.map((user) => (\n            <option value={user.id} key={user.id}>{user.name}</option>\n          ))}\n        </select>\n\n        {chosenUserId === '0' && submitTried\n        && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoType } from './types/TodoType';\nimport { TodoForm } from './components/TodoForm';\nimport { getUser } from './functions/getUser';\n\nexport const todos: TodoType[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(usersFromServer, todo.userId),\n}));\n\nexport const App = () => {\n  const [todosList, setTodosList] = useState<TodoType[]>(todos);\n\n  const formOnSubmit = (newTodo: TodoType) => {\n    setTodosList((prev) => ([...prev, newTodo]));\n  };\n\n  const newTodoId = Math.max(...todosList.map(todo => todo.id)) + 1;\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={formOnSubmit} newTodoId={newTodoId} />\n\n      <TodoList todos={todosList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}